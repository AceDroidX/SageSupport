// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["deno"]
  output          = "../generated/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Auth {
  id     Int    @id @default(autoincrement())
  passwd String
  salt   String
  user   User   @relation(fields: [userId], references: [id])
  userId Int    @unique
}

model Session {
  id     Int      @id @default(autoincrement())
  token  String   @unique
  expire DateTime
  user   User     @relation(fields: [userId], references: [id])
  userId Int
}

model User {
  id                  Int            @id @default(autoincrement())
  name                String         @unique
  role                UserRole       @default(USER)
  Conversation        Conversation[] @relation(name: "User")
  SupportConversation Conversation[] @relation(name: "SupportUser")
  Message             Message[]
  // profile Profile?
  Auth                Auth?
  Session             Session[]
}

enum UserRole {
  USER
  SUPPORT
  ADMIN
}

// model Profile {
//   id     Int    @id @default(autoincrement())
//   bio    String
//   user   User   @relation(fields: [userId], references: [id])
//   userId Int    @unique
// }

model Conversation {
  id            Int       @id @default(autoincrement())
  title         String
  message       Message[]
  User          User      @relation(name: "User", fields: [userId], references: [id], onDelete: Cascade)
  userId        Int
  SupportUser   User?     @relation(name: "SupportUser", fields: [supportUserId], references: [id])
  supportUserId Int?
}

model Message {
  messageId      Int          @id @default(autoincrement())
  content        String
  type           MessageType
  createdAt      DateTime     @default(now())
  Conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  conversationId Int
  User           User?        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         Int?
}

enum MessageType {
  USER
  SUPPORT
  AI
  SYSTEM
}

model Document {
  uuid         String   @id
  name         String
  textSplitsId String[]
  graph        String
}
